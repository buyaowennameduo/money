package ${package.Service};

import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.Function;

import com.baomidou.mybatisplus.extension.service.IService;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;

import ${package.Entity}.${entity};
import ${cfg.query}.${entity}Query;
import ${cfg.form}.${entity}Form;
import ${cfg.vo}.${entity}Vo;

/**
 * <p>
 * $!{table.comment} 服务类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
public interface ${table.serviceName} extends ${superServiceClass}<${entity}> {
    /**
    * 保存信息对象
    * @param record 信息对象
    * @return 影响记录数
    */
    Integer save(${entity}Form record);

    /**
    * 根据主键删除信息对象
    * 逻辑删除,字段改为删除态
    * @param id 主键
    * @return 影响记录数
    */
    Integer deleteById(String id);

    /**
    * 根据主键更新信息对象
    * @param record 信息对象
    * @return 影响记录数
    */
    Integer updateById(${entity}Form record);

    /**
    * 根据主键查询信息对象
    * @param id 主键
    * @return 信息对象
    */
    ${entity}Vo selectById(String id);

    /**
    *  分页查询
    * @param ${table.entityPath}Query
    * @return
    */
    IPage<${entity}Vo> selectPage(${entity}Query ${table.entityPath}Query);

    /**
     * 查询列表
     * @param ${table.entityPath}Query
     * @return
     */
    List<${entity}Vo> selectList(${entity}Query ${table.entityPath}Query);

    /**
     * 根据角色id赋值名称
     * @param t 实体对象
     * @param f id的get方法
     * @param c name的set方法
     * @param <T>
     */
    <T> void doSetName(T t, Function<T, String> f, BiConsumer<T, String> c);

    /**
    * 根据角色id赋值名称
    * @param l 实体对象集合
    * @param f id的get方法
    * @param c name的set方法
    * @param <T>
    */
    <T> void doSetName(List<T> l, Function<T, String> f, BiConsumer<T, String> c);

    /**
    * 生成查询条件
    * @param queryWrapper 生成的条件
    * @param ${table.entityPath}Query 前台传值的query对象
    */
    QueryWrapper<${entity}> getQueryWrapper(QueryWrapper<${entity}> queryWrapper,${entity}Query ${table.entityPath}Query);

    /*******************通用方法结束**********************/
}

